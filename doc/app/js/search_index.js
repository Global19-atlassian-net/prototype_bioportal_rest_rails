var search_data = {"index":{"searchIndex":["applicationcontroller","klass","klassescontroller","linkeddata","queries","klass","ontology","record","record","serializer","classmethods","metrics","ontologiescontroller","ontology","rdfutil","restfullinks","classmethods","all()","as_json()","as_json()","child_count()","children()","convert_describe_results()","convert_xsd()","describe()","describe()","exists?()","exists?()","find()","find()","id()","id=()","included()","included()","index()","index()","init()","new()","parents()","populate_default_attr()","predicates()","properties()","query()","read_attribute_for_validation()","related_resources()","related_resources()","resource_path()","resource_path()","restful_links()","restful_render()","root_classes()","serializable_fields()","serializable_fields()","serializable_fields_default()","serializable_methods()","serialize_additional()","serialize_default()","serialize_methods()","serializer_options()","shorten()","show()","show()","sparql_select_values()","readme_for_app"],"longSearchIndex":["applicationcontroller","klass","klassescontroller","linkeddata","linkeddata::queries","linkeddata::queries::klass","linkeddata::queries::ontology","linkeddata::queries::record","linkeddata::record","linkeddata::serializer","linkeddata::serializer::classmethods","metrics","ontologiescontroller","ontology","rdfutil","restfullinks","restfullinks::classmethods","ontology::all()","klass#as_json()","linkeddata::record#as_json()","klass#child_count()","klass#children()","linkeddata::record::convert_describe_results()","rdfutil::convert_xsd()","linkeddata::record::describe()","ontology::describe()","klass::exists?()","linkeddata::record::exists?()","klass::find()","ontology::find()","ontology#id()","ontology#id=()","linkeddata::serializer::included()","restfullinks::included()","klassescontroller#index()","ontologiescontroller#index()","klass#init()","linkeddata::record::new()","klass#parents()","klass#populate_default_attr()","linkeddata::record::predicates()","klass#properties()","rdfutil::query()","linkeddata::record#read_attribute_for_validation()","restfullinks#related_resources()","restfullinks::classmethods#related_resources()","restfullinks#resource_path()","restfullinks::classmethods#resource_path()","restfullinks#restful_links()","applicationcontroller#restful_render()","ontology#root_classes()","linkeddata::serializer#serializable_fields()","linkeddata::serializer::classmethods#serializable_fields()","linkeddata::serializer#serializable_fields_default()","linkeddata::serializer#serializable_methods()","linkeddata::serializer::classmethods#serialize_additional()","linkeddata::serializer::classmethods#serialize_default()","linkeddata::serializer::classmethods#serialize_methods()","applicationcontroller#serializer_options()","linkeddata::record::shorten()","klassescontroller#show()","ontologiescontroller#show()","rdfutil::sparql_select_values()",""],"info":[["ApplicationController","","ApplicationController.html","",""],["Klass","","Klass.html","","<p>Base object for ontology classes. This object is read-only. Setting values\nfor attributes will not propagate …\n"],["KlassesController","","KlassesController.html","",""],["LinkedData","","LinkedData.html","",""],["LinkedData::Queries","","LinkedData/Queries.html","",""],["LinkedData::Queries::Klass","","LinkedData/Queries/Klass.html","",""],["LinkedData::Queries::Ontology","","LinkedData/Queries/Ontology.html","",""],["LinkedData::Queries::Record","","LinkedData/Queries/Record.html","",""],["LinkedData::Record","","LinkedData/Record.html","",""],["LinkedData::Serializer","","LinkedData/Serializer.html","",""],["LinkedData::Serializer::ClassMethods","","LinkedData/Serializer/ClassMethods.html","",""],["Metrics","","Metrics.html","",""],["OntologiesController","","OntologiesController.html","",""],["Ontology","","Ontology.html","",""],["RDFUtil","","RDFUtil.html","","<p>Utility methods for working with RDF data, mainly returned SPARQL query\nresults from 4store\n"],["RestfulLinks","","RestfulLinks.html","","<p>Provides a mechanism to create relationships between objects or declare\nrelated paths, which are used …\n"],["RestfulLinks::ClassMethods","","RestfulLinks/ClassMethods.html","",""],["all","Ontology","Ontology.html#method-c-all","()",""],["as_json","Klass","Klass.html#method-i-as_json","(options = {})","<p>Overrides default serialization method. This enables the “include” query\nstring parameter to …\n"],["as_json","LinkedData::Record","LinkedData/Record.html#method-i-as_json","(options = {})",""],["child_count","Klass","Klass.html#method-i-child_count","()","<p>Number of children the term has @return [Integer] count of children\n"],["children","Klass","Klass.html#method-i-children","()","<p>URIs for child classes @return [Array] URIs for all child classes\n"],["convert_describe_results","LinkedData::Record","LinkedData/Record.html#method-c-convert_describe_results","(results, object_id)",""],["convert_xsd","RDFUtil","RDFUtil.html#method-c-convert_xsd","(type, datatype, value)","<p>Takes returned value information and converts to appropriate Ruby object\ntypes @param [String] type of …\n"],["describe","LinkedData::Record","LinkedData/Record.html#method-c-describe","(ids = [], embed = [])",""],["describe","Ontology","Ontology.html#method-c-describe","(id = nil, options = {})",""],["exists?","Klass","Klass.html#method-c-exists-3F","(id, ontology)","<p>Check whether or not the class exists @return [Boolean]\n"],["exists?","LinkedData::Record","LinkedData/Record.html#method-c-exists-3F","(id)",""],["find","Klass","Klass.html#method-c-find","(id, ontology, options = {})","<p>Find an existing class. @param [String] URI id for the class @param\n[String] id/acronym of the ontology …\n"],["find","Ontology","Ontology.html#method-c-find","(id = nil, options = {})",""],["id","Ontology","Ontology.html#method-i-id","()",""],["id=","Ontology","Ontology.html#method-i-id-3D","(id)",""],["included","LinkedData::Serializer","LinkedData/Serializer.html#method-c-included","(base)",""],["included","RestfulLinks","RestfulLinks.html#method-c-included","(base)",""],["index","KlassesController","KlassesController.html#method-i-index","()",""],["index","OntologiesController","OntologiesController.html#method-i-index","()",""],["init","Klass","Klass.html#method-i-init","()","<p>Provide values for default attributes\n"],["new","LinkedData::Record","LinkedData/Record.html#method-c-new","(attributes = {})",""],["parents","Klass","Klass.html#method-i-parents","()","<p>URIs for all parent classes @return [Array] URIs for all parent classes\n"],["populate_default_attr","Klass","Klass.html#method-i-populate_default_attr","()","<p>Set the default attributes that every class should have.\n"],["predicates","LinkedData::Record","LinkedData/Record.html#method-c-predicates","(rdf_type = nil)",""],["properties","Klass","Klass.html#method-i-properties","()","<p>All of the properties for the term that exist in the triplestore. @return\n[Hash] properties\n"],["query","RDFUtil","RDFUtil.html#method-c-query","(query, options = {})","<p>Perform a query against the triplestore using HTTP @param [String] properly\nformed SPARQL query @option …\n"],["read_attribute_for_validation","LinkedData::Record","LinkedData/Record.html#method-i-read_attribute_for_validation","(key)",""],["related_resources","RestfulLinks","RestfulLinks.html#method-i-related_resources","()","<p>Returns a list of related resources\n"],["related_resources","RestfulLinks::ClassMethods","RestfulLinks/ClassMethods.html#method-i-related_resources","(*resources)","<p>Set the related resources for this object @param [Hash] key symbol\nrepresenting related object name (used …\n"],["resource_path","RestfulLinks","RestfulLinks.html#method-i-resource_path","()","<p>Returns the object’s path\n"],["resource_path","RestfulLinks::ClassMethods","RestfulLinks/ClassMethods.html#method-i-resource_path","(path)","<p>Set the path for this object @param [String] path in the form of\n“/resource/:resource_class_name …\n"],["restful_links","RestfulLinks","RestfulLinks.html#method-i-restful_links","()","<p>Generate links for the object.\n"],["restful_render","ApplicationController","ApplicationController.html#method-i-restful_render","(obj)","<p>Render an object and add RESTful links when available TODO: Method should\ndo content negotiation for …\n"],["root_classes","Ontology","Ontology.html#method-i-root_classes","()",""],["serializable_fields","LinkedData::Serializer","LinkedData/Serializer.html#method-i-serializable_fields","()",""],["serializable_fields","LinkedData::Serializer::ClassMethods","LinkedData/Serializer/ClassMethods.html#method-i-serializable_fields","()",""],["serializable_fields_default","LinkedData::Serializer","LinkedData/Serializer.html#method-i-serializable_fields_default","()",""],["serializable_methods","LinkedData::Serializer","LinkedData/Serializer.html#method-i-serializable_methods","()",""],["serialize_additional","LinkedData::Serializer::ClassMethods","LinkedData/Serializer/ClassMethods.html#method-i-serialize_additional","(*fields)",""],["serialize_default","LinkedData::Serializer::ClassMethods","LinkedData/Serializer/ClassMethods.html#method-i-serialize_default","(*fields)",""],["serialize_methods","LinkedData::Serializer::ClassMethods","LinkedData/Serializer/ClassMethods.html#method-i-serialize_methods","(*methods)",""],["serializer_options","ApplicationController","ApplicationController.html#method-i-serializer_options","()","<p>Look for the ‘include’ param in the request and set appropriately\n"],["shorten","LinkedData::Record","LinkedData/Record.html#method-c-shorten","(results)",""],["show","KlassesController","KlassesController.html#method-i-show","()",""],["show","OntologiesController","OntologiesController.html#method-i-show","()",""],["sparql_select_values","RDFUtil","RDFUtil.html#method-c-sparql_select_values","(results)","<p>Convert a list of SPARQL JSON values to proper Ruby objects @param [Array]\nlist of results. Each item …\n"],["README_FOR_APP","","doc/README_FOR_APP.html","","<p>Use this README file to introduce your application and point to useful\nplaces in the API for learning …\n"]]}}